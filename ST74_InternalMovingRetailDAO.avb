Option Explicit

'#include "HL74_Const.avb"

'----
'
'----
Function InternalMovingRetail(Op, TrNoTo, TrNoFrom, ChargeMode, flWrite, IsViewError, flBalAccount, flAgFrom, BaseAccCode, BaseAccSortMode, TrNoAddSum)
	Dim Errors
	Dim TrFrom
	Dim TrAddSum
	Dim TrTo
	Dim BaseAccID
	Dim IsError

	If Not TestData(Op, TrNoTo, TrNoAddSum) Then
		InternalMovingRetail = False
		Exit Function
	End If

	' создали объект для хранения ошибок
	Set Errors = CreateObject("Scripting.Dictionary")

	Set TrFrom = Op.TransList(TrNoFrom)
	Set TrAddSum = Op.TransList(TrNoAddSum)

	If TrNoFrom = TrNoTo Then
		Set TrTo = Op.TransList(Op.TransCount + 1)
		Op.CopyAccounts Op.TransCount, True, TrNoFrom, True
		Op.CopyAccounts Op.TransCount, False, TrNoFrom, False
		Op.CopyAgents Op.TransCount, True, TrNoFrom, True
		Op.CopyAgents Op.TransCount, False, TrNoFrom, True
	Else
		Set TrTo = Op.TransList(TrNoTo)
	End If

	BaseAccID = WorkArea.GetAccIDold(BaseAccCode)

	ClearTrMoving TrAddSum
	ClearTrMoving TrTo

	Select Case ChargeMode
		Case 1, 2, 4
			' списание FIFO / LIFO / средние цены
			InternalMovingRetailAuto Op, TrFrom, TrTo, TrAddSum, ChargeMode, flWrite, Errors
		Case 3
			' ручное списание
			MsgBox "Внутреннее перемещение вручную в этой версии не реализовано.", vbExclamation, "Акцент " & App.Version
			IsError = True
	End Select

	' если возникли ошибки, то необходимо их отобразить
	IsError = (Errors.Count <> 0)

	If IsError Then
		If IsViewError Then 
			Set WorkArea.Map.Item("ErrorOp") = Op
			ViewError Errors
		End If
	ElseIf TrNoFrom = TrNoTo Then
		Set TrFrom = Op.TransList(TrNoTo)

		ClearTrMoving TrFrom
		Op.CopyEntSeries TrNoTo, Op.TransCount
	  	TrFrom.CalcSum "=$" & Op.TransCount
	  	TrFrom.CalcQty "=Q" & Op.TransCount

		TrTo.EnumTrans GetRef("TrCopyParams"), TrFrom
	End If

	If TrNoFrom = TrNoTo Then Op.DeleteTransList Op.TransCount
	InternalMovingRetail = Not IsError

End Function
'----
'
'----
Function TrCopyParams(TrFrom, ByRef TrTo)
	Dim i, j, TrToOne

	TrCopyParams = True
	Set TrToOne = TrTo.Item(TRFrom.RowNo)

	With TrFrom.Params
		For i = 1 To .Count
			TrToOne.Params.Item(i).Value = .Item(i).Value2
		Next
	End With

End Function
'----
'
'----
Sub InternalMovingRetailAuto(Op, TrFrom, TrTo, TrAddSum, ChargeMode, flWrite, Errors)
	Dim i, Mt, MC, OnDate, DocID
	Dim DictSeries, TrPrice
	Dim AccID, AgID, AccIDRetail, AccFromID
	
	'индикатор процесса
	Set Mt =	Meter
	Mt.Open "Списание ...", 0, TrFrom.Rows

	MC = WorkArea.MyCompany.ID
	OnDate = Op.Date
	DocID = Op.ID

	AgID = TrFrom.Item(1).AgFromID
	AccID = TrTo.Item(1).AccCrID
	AccIDRetail = TrAddSum.Item(1).AccCrID

	Set DictSeries = CreateObject("Scripting.Dictionary")

	For i = 1 To TrFrom.Rows
		With TrFrom.Item(i)
			If .EntId <> 0 Then
				If .Qty > 0 Then
					.Price = GetEntRetailPriceMoving(AccID, .EntID, .AgFromID, OnDate, DocID, MC)
					TrPrice = GetEntRetailPriceMoving(AccID, .EntID, .AgToID, OnDate, DocID, MC)
					If TrPrice = 0 Then TrPrice = .Price
					DoMoveRetail .EntID, .Qty, AccID, AgID, .AgToID, AccIDRetail, OnDate, DocID, ChargeMode, i, MC, TrPrice, TrTo, TrAddSum, flWrite, DictSeries, Errors
				End If
			End If
		End With

		Mt.Pos = Mt.Pos + 1 		' нарастили индикатор
	Next

	Mt.Close

End Sub
'---
'
'---
Function GetEntRetailPriceMoving(AccID, EntID, AgToID, OnDate, DocID, MC)
	Dim QD, Rs
	Dim Qty, Sum
	Dim Price, PriceKind

	Set QD = WorkArea.DAODataBase.CreateQueryDef("")
	QD.SQL = "Select Qty, Sum from ST7_oddments_of_the_goods where EntID=[Ent_ID] and Qty <> 0 and Sum <> 0"

	QD.Parameters(0).Value = AgToID
	QD.Parameters(1).Value = AccID
	QD.Parameters(2).Value = DocID
	QD.Parameters(3).Value = OnDate
	QD.Parameters(4).Value = ""
	QD.Parameters(5).Value = MC
	QD.Parameters(6).Value = EntID

	Set Rs = QD.OpenRecordSet()

	If Rs.EOF Then
		Price = 0
	Else
		Qty = Rs.Fields(0).Value
		Sum = Rs.Fields(1).Value

		Price = Sum / Qty
	End If

	If Price = 0 Then
		With WorkArea.Agent(AgToID).Params
			If .Exists(prmAgDefPrice) Then
				If .Item(prmAgDefPrice).Value2 <> 0 Then
					Set PriceKind = Workarea.PriceKind(.Item(prmAgDefPrice).Value2)
					Price = PriceKind.GetEntPrice(EntID, OnDate, WorkArea.DefPriceList)
				End If
			End If
		End With
	End If

	GetEntRetailPriceMoving = Price
	
End Function
'---
'
'---
Function GetEntSeriesRestRetailMoving(AccID, AgID, EntID, AccIDRetail, OnDate, DocID, MC, ChargeMode)
	Dim QD, RS, RsCount

	Set QD = Workarea.DAODAtaBase.CreateQueryDef("")
	If ChargeMode <> 4 Then
		QD.SQL = 	"PARAMETERS AccID Long, AgID Long, EntID Long, AddAccID long, OnDate DateTime, DocID Long, MC Long;" & _
						"Select journal.SER_ID AS seriesID, Ser_Date1 as SeriesDate, " & _
						"Sum(J_QTY*(IIf([AccID]=ACC_DB And J_AG1=[AgID],1,0)-IIf([AccID]=ACC_CR And J_AG2=[AgID],1,0))) AS RestQty, " & _
						"Sum(J_SUM*(IIf([AccID]=ACC_DB And J_AG1=[AgID],1,0)-IIf([AccID]=ACC_CR And J_AG2=[AgID],1,0))) AS RestSum, " & _ 
						"Sum(J_SUM*(IIf([AccID]=ACC_DB And ACC_CR = [AddAccID] And J_AG1=[AgID],1,0)-IIf([AccID]=ACC_CR And ACC_DB = [AddAccID] And J_AG2=[AgID],1,0))) AS RestAddSum " & _
						"FROM SERIES Right Join JOURNAL On SERIES.SER_ID = JOURNAL.SER_ID " & _
						"WHERE J_DONE = 2 And DOC_ID <> [DocID] And MC_ID = [MC] And J_DATE <= [OnDate] And J_ENT = [EntID] And " & _ 
						"((IIf([AccID]=ACC_DB And J_AG1=[AgID],1,0)-IIf([AccID]=ACC_CR And J_AG2=[AgID],1,0)) <> 0 Or " & _ 
						"(IIf([AccID]=ACC_DB And ACC_CR = [AddAccID] And J_AG1=[AgID],1,0)-IIf([AccID]=ACC_CR And ACC_DB = [AddAccID] And J_AG2=[AgID],1,0)) <> 0) " & _
						"GROUP BY journal.SER_ID, Ser_Date1 " & _
						"ORDER BY Ser_Date1"

		If ChargeMode = 2 Then QD.SQL = QD.SQL & " DESC"
	Else
		QD.SQL = 	"PARAMETERS AccID Long, AgID Long, EntID Long, AddAccID long, OnDate DateTime, DocID Long, MC Long;" & _
						"Select 0 AS seriesID, 0 as SeriesDate, " & _
						"Sum(J_QTY*(IIf([AccID]=ACC_DB And J_AG1=[AgID],1,0)-IIf([AccID]=ACC_CR And J_AG2=[AgID],1,0))) AS RestQty, " & _
						"Sum(J_SUM*(IIf([AccID]=ACC_DB And J_AG1=[AgID],1,0)-IIf([AccID]=ACC_CR And J_AG2=[AgID],1,0))) AS RestSum, " & _ 
						"Sum(J_SUM*(IIf([AccID]=ACC_DB And ACC_CR = [AddAccID] And J_AG1=[AgID],1,0)-IIf([AccID]=ACC_CR And ACC_DB = [AddAccID] And J_AG2=[AgID],1,0))) AS RestAddSum " & _
						"FROM JOURNAL " & _
						"WHERE J_DONE = 2 And DOC_ID <> [DocID] And MC_ID = [MC] And J_DATE <= [OnDate] And J_ENT = [EntID] And " & _ 
						"((IIf([AccID]=ACC_DB And J_AG1=[AgID],1,0)-IIf([AccID]=ACC_CR And J_AG2=[AgID],1,0)) <> 0 Or " & _ 
						"(IIf([AccID]=ACC_DB And ACC_CR = [AddAccID] And J_AG1=[AgID],1,0)-IIf([AccID]=ACC_CR And ACC_DB = [AddAccID] And J_AG2=[AgID],1,0)) <> 0)"
	End If

	QD.Parameters(0).Value = AccID
	QD.Parameters(1).Value = AgID
	QD.Parameters(2).Value = EntID
	QD.Parameters(3).Value = AccIDRetail
	QD.Parameters(4).Value = OnDate
	QD.Parameters(5).Value = DocID
	QD.Parameters(6).Value = MC

	Set Rs = QD.OpenRecordSet

	If Rs.EOF Then
		GetEntSeriesRestRetailMoving = Array()
	Else
		Rs.MoveLast
		RsCount = Rs.RecordCount
		Rs.MoveFirst
		GetEntSeriesRestRetailMoving = Rs.GetRows(RsCount)
	End If

End Function
'----
'
'----
Sub DoMoveRetail(EntID, Qty, AccID, AgID, AccFromID, AccIDRetail, OnDate, DocID, ChargeMode, TrRowNo, MC, CurrPrice, ByRef TrLstTo, ByRef TrAddSum, flWrite, DictSeries, Errors)
	Dim TotalQty
	Dim TrSum
	Dim aSeries
	Dim i, RowNo
	Dim aOneSeries
	Dim RowSum, RowAddSum

	TotalQty = Qty
	TrSum = CurrPrice * Qty
	aSeries = GetEntSeriesRestRetailMoving(AccID, AgID, EntID, AccIDRetail, OnDate, DocID, MC, ChargeMode)
	
	If UBound(aSeries) = -1 Then
		' нет серий на остатке
		Errors.Add Errors.Count + 1, Array(acErrorNoSeries, EntID, TotalQty, TrRowNo, AccID, AgID)
	Else
		For i = 0 To UBound(aSeries, 2)
			If TotalQty = 0 Then Exit For

			If Not DictSeries.Exists(aSeries(0, i)) Then DictSeries.Add aSeries(0, i), Array(aSeries(2, i), aSeries(3, i), aSeries(4, i))
			aOneSeries = DictSeries.Item(aSeries(0, i))

			If aOneSeries(0) > 0 Then

				If TotalQty >= aOneSeries(0) Then 
					RowSum = aOneSeries(1) - aOneSeries(2)

					AddRowToTransMoving TrLstTo, EntID, AccID, AgID, aOneSeries(0), aSeries(0, i), RowSum, True
					AddRowToTransMoving TrAddSum, EntID, AccIDRetail, AgID, 0, aSeries(0, i), -aOneSeries(2), False

					If CurrPrice = 0 Then
						AddRowToTransMoving TrAddSum, EntID, AccIDRetail, AccFromID, 0, aSeries(0, i), aOneSeries(2), False
					Else
						AddRowToTransMoving TrAddSum, EntID, AccIDRetail, AccFromID, 0, aSeries(0, i), CurrPrice * aOneSeries(0) - RowSum, False
					End If

					TotalQty = TotalQty - aOneSeries(0)
					aOneSeries(0) = 0
					aOneSeries(2) = 0
				Else
					RowSum = (aOneSeries(1) - aOneSeries(2)) / aOneSeries(0)
					RowAddSum = aOneSeries(2) / aOneSeries(0)
					AddRowToTransMoving TrLstTo, EntID, AccID, AgID, TotalQty, aSeries(0, i), RowSum * TotalQty, True
					AddRowToTransMoving TrAddSum, EntID, AccIDRetail, AgID, 0, aSeries(0, i), -RowAddSum * TotalQty, False

					If CurrPrice = 0 Then
						AddRowToTransMoving TrAddSum, EntID, AccIDRetail, AccFromID, 0, aSeries(0, i), RowAddSum * TotalQty, False
					ElseIf  RowSum < CurrPrice Then
						AddRowToTransMoving TrAddSum, EntID, AccIDRetail, AccFromID, 0, aSeries(0, i), (CurrPrice - RowSum) * TotalQty, False
					ElseIf RowSum > CurrPrice Then
						Errors.Add Errors.Count + 1, Array(acErrorMinusAdd, EntID, TotalQty, TrRowNo, AccID, AgID)						
					End If

					aOneSeries(0) = aOneSeries(0) - TotalQty
					aOneSeries(2) = RowAddSum * TotalQty
					TotalQty = 0
				End If

				DictSeries.Item(aSeries(0, i)) = aOneSeries
				TrLstTo.Item(TrLstTo.Rows).Params(prmTrPrice).Value = CurrPrice 
				
			End If
		Next

		If TotalQty <> 0 Then
			Errors.Add Errors.Count + 1, Array(acErrorNoQuant, EntID, TotalQty, TrRowNo, AccID, AgID)
		End If

	End If

End Sub
'----
'
'----
Sub AddRowToTransMoving(ByRef TrLst, EntID, AccID, AgID, ByRef Qty, SeriesID, RowSum, Mode)
	Dim RowNo

	If TrLst.Item(TrLst.Rows).EntID <> 0 Then
		RowNo = TrLst.Rows + 1
	Else
		RowNo = TrLst.Rows
	End If

	With TrLst.Item(RowNo)
		.EntID = EntID

		If Mode Then
			.Qty = Qty
		Else
			.Qty = 0
		End If

		.Sum = RowSum
		' единица измерения
		.AgToId = AgID
		.AccCrId = AccID
		.AgFromId = AgID
		.SeriesID = SeriesID
	End With
End Sub
'----
'
'----
Sub ClearTrMoving(TrList)
	TrList.Rows = 1

	With TrList(1)
		.EntID = 0
		.SeriesID = 0
		.Qty = 0
		.Sum = 0
		.Price = 0		
	End With
End Sub
'----
'
'----
Function TestData(Op, TrNo, TrNoAdd)
	Dim Tr, TrAdd

	Set Tr = Op.Translist(TrNo).Item(1)
	Set TrAdd = Op.Translist(TrNoAdd).Item(1)

	TestData = (Tr.AgToID <> 0 And Tr.AgFromID <> 0) And (TrNo <> TrNoAdd)

End Function
'---
'
'---


