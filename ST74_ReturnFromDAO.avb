Option Explicit

Const prmQty	=	"Количество"

'--------------------------
'	набор процедур для поддержки операций по возврату товара поставщику
'	пока возвращается только методом FIFO
'--------------------------
Function ReturnFrom(Op, TrNoTo, TrNoFrom, ReturnMode, flWrite, IsViewError, flBalAccount, flAgFrom,  BaseAccCode, BaseAccSortMode)
	Dim Errors
	Dim MyCoID
	Dim InhertiValue
	
	MyCoID = WorkArea.MyCompany.ID

	Set Errors = CreateObject("Scripting.Dictionary")

	If ReturnMode = 3 Then 
		ManualCharge Op, TrNoTo, TrNoFrom, Errors, MyCoID
	Else
		With Op.TransList(TrNoTo)
			InhertiValue = .Inherit
			.Inherit = 510
		End With

		ReturnToSupplier Op, TrNoTo, flBalAccount, flAgFrom, Errors, MyCoID		
	End If

	If Errors.Count <> 0 Then

		If IsViewError Then 
			Set WorkArea.Map.Item("ErrorOp") = Op
			ViewError Errors
		End If

		ReturnFrom = False
	Else
		ReturnFrom = True
	End If

	Op.TransList(TrNoTo).Inherit = InhertiValue

End Function

'--------------------------
'	
'--------------------------
Sub ReturnToSupplier(Op, TrNoTo, flBalAccount, flAgFrom, ByRef Errors, MC)
	Dim i
	Dim aSeries, DictSeries

	Set DictSeries = CreateObject("Scripting.Dictionary")

	i = 1

	While i <= Op.TransList(TrNoTo).Rows
		With Op.Trans(TrNoTo, i)
			If .EntID <> 0 Then
				aSeries = GetRestEntSeries(.AgFromID, .EntID, .AgToID, .AccDbID, Op.ID, Op.Date, MC)

				If UBound(aSeries) <> -1 Then 
     	  		If Abs(.Qty) > 0 Then AddEntRetToRow aSeries, Op, TrNoTo, i, DictSeries, Errors
				Else
					Errors.Add Errors.Count + 1, Array(acErrorNoSeries, .EntId , Abs(.Qty), i, .AgFromID, .AccDbID) ' ошибка - нет серий
				End If
			End If

		End With
		i = i + 1
	Wend
End Sub

'--------------------------
'	
'--------------------------
Sub AddEntRetToRow(ByRef aSeries, ByRef Op, TrNoTo, ByRef i, ByRef DictSeries, ByRef Errors)
	Dim Qty, QtySeries
	Dim j, Pos

	Qty = Abs(Op.Trans(TrNoTo, i).Qty)

	For j = 0 To UBound(aSeries, 2)
		If Qty <= 0 Then Exit For

		If Not DictSeries.Exists(aSeries(0, j)) Then	DictSeries.Add aSeries(0, j), aSeries(1, j)

		With Op.Trans(TrNoTo, i)
			QtySeries = DictSeries.Item(aSeries(0, j))
			.SeriesID = aSeries(0, j)

			If aSeries(2, j) = 0 Or aSeries(1, j) = 0 Then
				.Price = 0
			Else
				.Price = aSeries(2, j) / aSeries(1, j)
			End If

			If QtySeries >= Qty Then
				DictSeries.Item(aSeries(0, j)) =  QtySeries - Qty
				Qty = 0
				Exit For
			Else
				' расщепляем строку
				.Qty = -QtySeries
				.Params(prmQty).Value = QtySeries
					
				Pos = Op.TransList(TrNoTo).InsertRow(i + 1)
				Qty = (Qty - QtySeries)

				With Op.Trans(TrNoTo, Pos)
					.Qty = -Qty
					.Params(prmQty).Value = Qty
				End With
		
				i = Pos

				DictSeries.Item(aSeries(0, j)) =  0
			End If
		End With
	Next
	
	If Qty <> 0 Then	
		Errors.Add Errors.Count + 1, Array(acErrorNoQuant, Op.Trans(TrNoTo, i).EntId , Qty, i, 0, 0) ' ошибка - недостаточно количества
	End If

End Sub
'--------------------------
'	
'--------------------------

Function GetRestEntSeries(AgSupplierID, EntID, AgStorageID, AccStorageID, DocID, OnDate, MC)
	Dim QD
	Dim Rs
	Dim rsCount

	Set Qd = WorkArea.DAODataBase.CreateQueryDef("")

	With QD
		.SQL = "PARAMETERS AgSupplierID Long, EntID Currency;" & _
					"Select ST7_RestSeriesFromSupplier.SeiesID, ST7_RestSeriesFromSupplier.RestQty, ST7_RestSeriesFromSupplier.RestSum " & _
					"FROM ST7_RestSeriesFromSupplier " & _
					"WHERE (((ST7_RestSeriesFromSupplier.J_ENT)=[EntID]) And ((ST7_RestSeriesFromSupplier.SupplierID)=[AgSupplierID]));"

		.Parameters(0).Value = AgSupplierID
		.Parameters(1).Value = EntID
		.Parameters(2).Value = AgStorageID
		.Parameters(3).Value = AccStorageID
		.Parameters(4).Value = DocID
		.Parameters(5).Value = OnDate
		.Parameters(6).Value = MC

		Set Rs = .OpenRecordSet

		If Not rs.eof Then
			Rs.MoveLast
			RsCount = Rs.RecordCount
			Rs.MoveFirst
			GetRestEntSeries = Rs.GetRows(RsCount)
		Else
			GetRestEntSeries = Array()
		End If
	End With
End Function
'--------------------------
'	
'--------------------------
Sub ManualCharge(Op, TrNoTo, TrNoFrom, Errors, MyCoID)
	Dim i
	Dim DictSeries
	Dim RestQty
	Dim OpDate
	Dim OpID

	OpDate = Op.Date
	OpID = Op.ID
	Set DictSeries = CreateObject("Scripting.Dictionary")

	For i = 1 To Op.TransList(TrNoTo).Rows
		With Op.Trans(TrNoTo, i)
			If .SeriesID = 0 Then
				Errors.Add Errors.Count + 1, Array(acErrorNoSeriesSet, .EntId , Abs(.Qty) - RestQty, i, .AccDbID, .AgFromID) ' ошибка - недостаточно количества				
			Else				
				If Not DictSeries.Exists(.SeriesID) Then
					DictSeries.Add .SeriesID, GetRestQtySeries(.EntID, .SeriesID, .AccDbID, .AgToID, .AgFromID, OpDate, OpID, MyCoID)
				End If

				RestQty = DictSeries.Item(.SeriesID)
				
				If Abs(.Qty) <= RestQty Then
					DictSeries.Item(.SeriesID) = DictSeries.Item(.SeriesID) - Abs(.Qty)
				Else
					Errors.Add Errors.Count + 1, Array(acErrorNoQtySeries, .EntId , Abs(.Qty) - RestQty, i, .AccDbID, .AgFromID) ' ошибка - недостаточно количества				
				End If
			End If
		End With
	Next

End Sub 

'--------------------------
'	
'--------------------------
Function GetRestQtySeries(EntID, SeriesID, AccID, AgToID, AgFromID, OpDate, OpID, MyCoID)
	Dim RS
	
	With WorkArea.DAODataBase.QueryDefs("ST7_entity_series_from_supplier")

		.Parameters(0).Value = AgToID
		.Parameters(1).Value = AccID
		.Parameters(2).Value = OpID
		.Parameters(3).Value = OpDate
		.Parameters(4).Value = AgFromID
		.Parameters(5).Value = EntID
		.Parameters(6).Value = SeriesID
		.Parameters(7).Value = MyCoID

		Set Rs = .OpenRecordSet

		If Not Rs.EOF Then
			GetRestQtySeries = Rs.Fields(0).Value
		Else
			GetRestQtySeries = 0
		End If
	
	End With

End Function
'--------------------------
'	
'--------------------------
